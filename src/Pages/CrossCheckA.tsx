import React, { useState, useEffect } from "react";
import styled from "styled-components";
import Background from "../Icons/BackgroundLong.png"
import Topbar from "../Components/Topbar";
import Sidebar from "../Components/Sidebar";
import { useLocation, useNavigate } from "react-router-dom";
import CopyIcon from "../Icons/Copy.svg";
import BookmarkIcon from "../Icons/Bookmark.svg";

const Wrapper = styled.div`
    margin: 0;
    padding: 0;
    width: 100vw;
    min-height: 100vh;
    background-image: url(${Background});
    background-size: cover;
    background-position: center;
`

const CrossCheckWrapper = styled.div`
    display: flex;
    flex-direction: row;
`

const MainWrapper = styled.div`
    margin: 0;
    min-height: calc(100vh - 4rem);
    width: calc(100vw - 15.5rem);
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    padding: 2rem;
`

const MainText = styled.div`
    color: #fff;
    font-size: 54px;
    font-weight: 800;
    margin-bottom: 1.25rem;
    text-align: center;
`

const Highlight = styled.span`
    color: #C2CCFD;
`

const ContentWrapper = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    max-width: 1000px;
`

const TabContainer = styled.div`
    display: flex;
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 100px;
    padding: 0.25rem;
    margin-bottom: 2rem;
    width: fit-content;
`

const Tab = styled.button<{ $isActive: boolean }>`
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 100px;
    font-size: 14px;
    font-weight: ${props => props.$isActive ? '800' : '500'};
    cursor: pointer;
    transition: all 0.2s ease;
    background-color: ${props => props.$isActive ? '#ffffff' : 'transparent'};
    color: ${props => props.$isActive ? '#3B5AF7' : '#ffffff'};
    box-shadow: ${props => props.$isActive ? '0 2px 4px rgba(0, 0, 0, 0.1)' : 'none'};

    &:hover {
        background-color: ${props => props.$isActive ? '#ffffff' : 'rgba(255, 255, 255, 0.5)'};
    }

    &:focus {
        outline: none;
    }
`

const ContentArea = styled.div`
    width: 44rem;
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 20px;
    padding: 2rem;
    height: auto;
    max-height: 50rem;
    margin-bottom: 2rem;
    overflow: auto;
    position: relative;
`

const ContentText = styled.div`
    color: #fff;
    font-size: 14px;
    font-weight: 600;
    line-height: 1.6;
    white-space: pre-line;
    padding-bottom: 3rem;
`

const IconContainer = styled.div`
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    display: flex;
    gap: 0.75rem;
`

const IconButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 50%;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;

    &:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }

    img.copy {
        width: 1.25rem;
        height: 1.25rem;
        filter: brightness(0) invert(1);
    }

    &:focus {
        outline : none;
    }
`

const ActionButton = styled.button`
    padding: 1rem 2rem;
    background-color: #F5F5F5;
    color: #333;
    border: none;
    border-radius: 100px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;

    &:hover {
        background-color: #E8E8E8;
    }
`

const ModalOverlay = styled.div`
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
`

const Modal = styled.div`
    width: 25rem;
    height: 16.625rem;
    background-color: #fff;
    border-radius: 20px;
    padding: 0;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
`

const ModalTitle = styled.h2`
    font-size: 20px;
    font-weight: 600;
    color: #000;
    margin: 2rem 0 0 0;
    text-align: center;
`

const ModalContent = styled.p`
    font-size: 14px;
    font-weight: 600;
    color: #494949;
    line-height: 1.5;
    text-align: center;
    margin: 0 2rem;
    white-space: pre-line;
`

const ModalButtons = styled.div`
    display: flex;
    justify-content: space-between;
    width: 100%;
    height: 4rem;
`

const ModalButton = styled.button`
    flex: 1;
    border-radius: 0px;
    padding: 0.75rem 1.5rem;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;

    &:focus {
        outline: none;
    }

    &.primary {
        border-bottom-left-radius: 20px;
        border: none;
        background-color: #EFEFEF;
        color: #494949;

        &:hover {
            background-color: #E8E8E8;
            outline: none;
        }
    }

    &.secondary {
        border-bottom-right-radius: 20px;
        border: none;
        background-color: #3B5AF7;
        color: #ffffff;

        &:hover {
            background-color: #2E4BD8;
            outline: none;
        }
    }
`

const CrossCheckA = () => {
    const location = useLocation();
    const navigate = useNavigate();

    // ÏÑ†ÌÉùÎêú AIÎì§ (location.stateÏóêÏÑú Í∞ÄÏ†∏Ïò§Í±∞ÎÇò Í∏∞Î≥∏Í∞í)
    const selectedAIs = location.state?.selectedAIs || [];
    
    // ÏÑ†ÌÉùÎêú AI Ï§ë Ï≤´ Î≤àÏß∏Î•º Í∏∞Î≥∏ ÌÉ≠ÏúºÎ°ú ÏÑ§Ï†ï
    const [activeTab, setActiveTab] = useState('chatgpt');
    const [showModal, setShowModal] = useState(false);

    // location.stateÍ∞Ä Î≥ÄÍ≤ΩÎê† Îïå activeTab ÏóÖÎç∞Ïù¥Ìä∏
    useEffect(() => {
        if (selectedAIs.length > 0) {
            setActiveTab(selectedAIs[0]);
        }
    }, [selectedAIs]);

    // AIÎ≥Ñ ÎãµÎ≥Ä Îç∞Ïù¥ÌÑ∞ (Ïã§Ï†úÎ°úÎäî Î∞±ÏóîÎìúÏóêÏÑú Î∞õÏïÑÏò¨ Îç∞Ïù¥ÌÑ∞)
    const aiResponses = {
        chatgpt: selectedAIs.includes('chatgpt') ? `‚úÖ 2025ÎÖÑ Ïù∏Í≥µÏßÄÎä• Ìä∏Î†åÎìú Î∂ÑÏÑù
(Í∏∞Ïà† ¬∑ ÏÇ∞ÏóÖ ¬∑ Ï†ïÏ±Ö Ï∏°Î©¥Î≥Ñ ÌïµÏã¨ Ìä∏Î†åÎìú)
1. Í∏∞Ïà† Ï∏°Î©¥
Î©ÄÌã∞Î™®Îã¨ AIÏùò Í≥†ÎèÑÌôî
ÌÖçÏä§Ìä∏, Ïù¥ÎØ∏ÏßÄ, ÏùåÏÑ±, ÎπÑÎîîÏò§Î•º ÎèôÏãúÏóê Ï≤òÎ¶¨ÌïòÎäî Î™®Îç∏Ïù¥ ÌëúÏ§ÄÌôîÎê®.
ÏòàÏãú: OpenAI GPT-5, Google GeminiÍ∞Ä ÏΩîÎìú ÏûëÏÑ±¬∑ÏòÅÏÉÅ Î∂ÑÏÑù¬∑ÌîÑÎ†àÏ††ÌÖåÏù¥ÏÖò Ï†úÏûëÍπåÏßÄ ÌÜµÌï© ÏßÄÏõê.
ÏóêÏù¥Ï†ÑÌä∏Ìòï AI ÌôïÏÇ∞
Îã®Ïàú Ï±óÎ¥áÏùÑ ÎÑòÏñ¥ ÏûêÎèôÏúºÎ°ú ÏûëÏóÖ Ïã§Ìñâ, Ìà¥ Ïó∞Í≤∞, Î∞òÎ≥µ ÏóÖÎ¨¥ Í¥ÄÎ¶¨ Í∞ÄÎä•.
ÏÇ¨Î°Ä: AutoGPT, Devin(ÏΩîÎî© AI), Í∏∞ÏóÖÏö© AI Ïò§ÌÜ†Î©îÏù¥ÏÖò ÌîåÎû´Ìèº Ï¶ùÍ∞Ä.
Í≤ΩÎüâÌôî Î∞è Ïò®ÎîîÎ∞îÏù¥Ïä§ AI
Î™®Î∞îÏùº¬∑IoTÏóêÏÑú Ïã§ÏãúÍ∞Ñ AI Ï≤òÎ¶¨ Í∞ÄÎä•, Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏ Í∞ïÌôî.
ÏòàÏãú: Apple Neural Engine, Qualcomm AI Engine Í∏∞Î∞ò Ïä§ÎßàÌä∏Ìè∞ ÎÇ¥ AI Ïï±.
2. ÏÇ∞ÏóÖ Ï∏°Î©¥
AI-First ÎπÑÏ¶àÎãàÏä§ Î™®Îç∏ ÌôïÎåÄ
AIÍ∞Ä ÌïµÏã¨ ÏÑúÎπÑÏä§Î°ú ÏûêÎ¶¨Ïû°Îäî SaaS, ÏΩòÌÖêÏ∏† Ï†úÏûë, ÍµêÏú° ÏÑúÎπÑÏä§ Ï¶ùÍ∞Ä.
ÏÇ¨Î°Ä: Runway(ÏòÅÏÉÅ ÏÉùÏÑ±), Perplexity AI(Í≤ÄÏÉâ+Ï±óÎ¥á).
AI + Î°úÎ≥¥Ìã±Ïä§ Í≤∞Ìï© Í∞ÄÏÜç
Î¨ºÎ•ò, Ï†úÏ°∞, Ìó¨Ïä§ÏºÄÏñ¥ÏóêÏÑú ÏûêÏú®Î°úÎ¥áÍ≥º AI ÌÜµÌï©.
ÏòàÏãú: Amazon Î°úÎ≥¥Ìã±Ïä§ ÏÑºÌÑ∞, Tesla Optimus(Ìú¥Î®∏ÎÖ∏Ïù¥Îìú Î°úÎ¥á).
Ï¥àÍ∞úÏù∏Ìôî ÏÑúÎπÑÏä§ Í∞ïÌôî
ÏÜåÎπÑÏûê Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò ÎßûÏ∂§Ìòï ÏΩòÌÖêÏ∏†¬∑ÏáºÌïë¬∑ÏùòÎ£å ÏÑúÎπÑÏä§.
ÏÇ¨Î°Ä: Netflix Í∞úÏù∏Ìôî Ï∂îÏ≤ú, AI Í∏∞Î∞ò Í±¥Í∞ï Í¥ÄÎ¶¨ Ïï±.
3. Ï†ïÏ±Ö Ï∏°Î©¥
AI Í∑úÏ†ú Î∞è Í±∞Î≤ÑÎÑåÏä§ Í∞ïÌôî
EU AI Act Î∞úÌö®, ÎØ∏Íµ≠¬∑ÌïúÍµ≠ÎèÑ ÏúÑÌóò Í∏∞Î∞ò Í∑úÏ†ú ÎèÑÏûÖ.
ÏòàÏãú: Í≥†ÏúÑÌóò AI(ÏùòÎ£å, Í∏àÏúµ)Îäî ÏÇ¨Ï†Ñ Ïã¨ÏÇ¨ Î∞è Ïù∏Ï¶ù ÏùòÎ¨¥Ìôî.
AI Ïú§Î¶¨¬∑Í≥µÏ†ïÏÑ± ÌëúÏ§ÄÌôî
Îç∞Ïù¥ÌÑ∞ Ìé∏Ìñ•, ÏÑ§Î™Ö Í∞ÄÎä•ÏÑ±, Ìà¨Î™ÖÏÑ± ÌôïÎ≥¥Î•º ÏúÑÌïú Íµ≠Ï†ú Í∞ÄÏù¥ÎìúÎùºÏù∏ Ï†úÏ†ï.
ÏÇ¨Î°Ä: OECD AI ÏõêÏπô, ISO AI ÌëúÏ§Ä ÌôïÎåÄ.
AI Î≥¥Ïïà¬∑ÌîÑÎùºÏù¥Î≤ÑÏãú Î≥¥Ìò∏ Í∞ïÌôî
ÏÉùÏÑ±Ìòï AI ÏïÖÏö© ÎåÄÏùë, Í∞úÏù∏Ï†ïÎ≥¥ Ïú†Ï∂ú Î∞©ÏßÄ ÏúÑÌïú Í∏∞Ïà†¬∑Î≤ïÏ†ú Í∞ïÌôî.
ÏòàÏãú: ÏõåÌÑ∞ÎßàÌÅ¨ ÏÇΩÏûÖ, Îç∞Ïù¥ÌÑ∞ Î°úÏª¨Î¶¨Ï†úÏù¥ÏÖò Í∑úÏ†ú.
üî• Ìïú Ï§Ñ ÏöîÏïΩ: 2025ÎÖÑ AIÎäî Î©ÄÌã∞Î™®Îã¨¬∑ÏóêÏù¥Ï†ÑÌä∏Ìòï Í∏∞Ïà†, ÏÇ∞ÏóÖÏùò AI-First Ï†ÑÌôò, Ï†ïÏ±ÖÏùò Í∑úÏ†ú¬∑Ïú§Î¶¨ ÌëúÏ§ÄÌôîÍ∞Ä ÌïµÏã¨ ÌùêÎ¶ÑÏûÖÎãàÎã§.` : 'ÏÉùÏÑ±Îêú Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.',
        claude: selectedAIs.includes('claude') ? `ÏïàÎÖïÌïòÏÑ∏Ïöî! 2025ÎÖÑ AI Ìä∏Î†åÎìúÏóê ÎåÄÌï¥ Î∂ÑÏÑùÌï¥ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.

Ï£ºÏöî Ìä∏Î†åÎìú:
1. Î©ÄÌã∞Î™®Îã¨ AI Î∞úÏ†Ñ
2. ÏóêÏù¥Ï†ÑÌä∏Ìòï AI ÌôïÏÇ∞
3. AI Í∑úÏ†ú Í∞ïÌôî

Ïù¥Îü¨Ìïú Î≥ÄÌôîÎäî Í∏∞Ïà†Í≥º ÏÇ¨ÌöåÏùò Ï°∞ÌôîÎ•º Ï∂îÍµ¨ÌïòÎäî Î∞©Ìñ•ÏúºÎ°ú ÏßÑÌñâÎê† Í≤ÉÏûÖÎãàÎã§.` : 'ÏÉùÏÑ±Îêú Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.',
        gemini: selectedAIs.includes('gemini') ? `2025ÎÖÑ AI Ìä∏Î†åÎìú Î∂ÑÏÑù:

Í∏∞Ïà†Ï†Å Ï∏°Î©¥ÏóêÏÑú Í∞ÄÏû• Ï£ºÎ™©Ìï† Ï†êÏùÄ Î©ÄÌã∞Î™®Îã¨ AIÏùò Í≥†ÎèÑÌôîÏûÖÎãàÎã§. ÌÖçÏä§Ìä∏, Ïù¥ÎØ∏ÏßÄ, ÏùåÏÑ±, ÎπÑÎîîÏò§Î•º ÌÜµÌï©Ï†ÅÏúºÎ°ú Ï≤òÎ¶¨ÌïòÎäî Îä•Î†•Ïù¥ ÌëúÏ§ÄÏù¥ Îê† Í≤ÉÏûÖÎãàÎã§.

ÏÇ∞ÏóÖÏ†Å Ï∏°Î©¥ÏóêÏÑúÎäî AI-First ÎπÑÏ¶àÎãàÏä§ Î™®Îç∏Ïù¥ ÌôïÏÇ∞Îê† Í≤ÉÏúºÎ°ú ÏòàÏÉÅÎê©ÎãàÎã§.` : 'ÏÉùÏÑ±Îêú Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.',
        perplexity: selectedAIs.includes('perplexity') ? `Î∞òÍ∞ëÏäµÎãàÎã§! 2025ÎÖÑ AI Ìä∏Î†åÎìúÏóê ÎåÄÌïú Î∂ÑÏÑùÏûÖÎãàÎã§.

ÌïµÏã¨ Î≥ÄÌôî:
- Î©ÄÌã∞Î™®Îã¨ AI ÌëúÏ§ÄÌôî
- ÏóêÏù¥Ï†ÑÌä∏Ìòï AI ÌôïÏÇ∞
- AI Í∑úÏ†ú ÌîÑÎ†àÏûÑÏõåÌÅ¨ Íµ¨Ï∂ï

Ïù¥Îü¨Ìïú Ìä∏Î†åÎìúÎäî AIÏùò Ïã§Ïö©ÏÑ±Í≥º ÏïàÏ†ÑÏÑ±ÏùÑ ÎèôÏãúÏóê Ï∂îÍµ¨ÌïòÎäî Î∞©Ìñ•ÏúºÎ°ú Î∞úÏ†ÑÌï† Í≤ÉÏûÖÎãàÎã§.` : 'ÏÉùÏÑ±Îêú Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.'
    };

    const tabs = [
        { id: 'chatgpt', name: 'ChatGPT' },
        { id: 'claude', name: 'Claude' },
        { id: 'gemini', name: 'Gemini' },
        { id: 'perplexity', name: 'Perplexity' }
    ];

    const handleVerificationClick = () => {
        if (selectedAIs.length === 1) {
            setShowModal(true);
        } else {
            navigate('/verification');
        }
    };

    const handleModalConfirm = () => {
        setShowModal(false);
    };

    const handleModalCancel = () => {
        setShowModal(false);
        navigate('/crosscheckq');
    };

    const handleCopyClick = async () => {
        const currentResponse = aiResponses[activeTab as keyof typeof aiResponses];
        if (currentResponse && currentResponse !== 'ÏÉùÏÑ±Îêú Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.') {
            try {
                await navigator.clipboard.writeText(currentResponse);
                // Î≥µÏÇ¨ ÏÑ±Í≥µ Ïãú ÌîºÎìúÎ∞± (ÏÑ†ÌÉùÏÇ¨Ìï≠)
                console.log('ÌÖçÏä§Ìä∏Í∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.');
            } catch (err) {
                console.error('Î≥µÏÇ¨ Ïã§Ìå®:', err);
            }
        }
    };

    return (
        <Wrapper>
            <Topbar/>
            <CrossCheckWrapper>
                <Sidebar/>
                <MainWrapper>
                    <MainText>Í∞Å <Highlight>AI Î™®Îç∏Ïùò ÎãµÎ≥Ä</Highlight>ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî</MainText>
                    <ContentWrapper>
                        <TabContainer>
                            {tabs.map(tab => (
                                <Tab 
                                    key={tab.id}
                                    $isActive={activeTab === tab.id}
                                    onClick={() => setActiveTab(tab.id)}
                                >
                                    {tab.name}
                                </Tab>
                            ))}
                        </TabContainer>
                        
                        <ContentArea>
                            <ContentText>
                                {aiResponses[activeTab as keyof typeof aiResponses]}
                            </ContentText>
                            {aiResponses[activeTab as keyof typeof aiResponses] !== 'ÏÉùÏÑ±Îêú Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.' && (
                                <IconContainer>
                                    <IconButton>
                                        <img src={BookmarkIcon} alt="Bookmark" />
                                    </IconButton>
                                    <IconButton onClick={handleCopyClick}>
                                        <img src={CopyIcon} alt="Copy" className="copy" />
                                    </IconButton>
                                </IconContainer>
                            )}
                        </ContentArea>
                        
                        <ActionButton onClick={handleVerificationClick}>
                            ÌôòÍ∞Å Ïó¨Î∂Ä Í≤ÄÏ¶ùÌïòÍ∏∞ {'>'}
                        </ActionButton>
                    </ContentWrapper>
                </MainWrapper>
            </CrossCheckWrapper>

            {showModal && (
                <ModalOverlay>
                    <Modal>
                        <ModalTitle>ÌôòÍ∞ÅÏó¨Î∂Ä Í≤ÄÏ¶ùÍ∏∞Îä• ÏÇ¨Ïö©Î∂àÍ∞Ä</ModalTitle>
                        <ModalContent> {`ÌïòÎÇòÏùò AIÎ•º ÏÇ¨Ïö©ÌïòÏòÄÍ∏∞ ÎïåÎ¨∏Ïóê ÌôòÍ∞Å Ïó¨Î∂ÄÎ•º
                        Í≤ÄÏ¶ùÌï† Ïàò ÏóÜÏäµÎãàÎã§.
                        Ïó¨Îü¨ AIÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Îã§Ïãú ÎãµÎ≥ÄÏùÑ ÏÉùÏÑ±ÌïòÏãúÍ≤†ÏäµÎãàÍπå?`}
                        </ModalContent>
                        <ModalButtons>
                            <ModalButton className="primary" onClick={handleModalConfirm}>
                                ÎèåÏïÑÍ∞ÄÍ∏∞
                            </ModalButton>
                            <ModalButton className="secondary" onClick={handleModalCancel}>
                                Îã§Ïãú ÏÉùÏÑ±ÌïòÍ∏∞
                            </ModalButton>
                        </ModalButtons>
                    </Modal>
                </ModalOverlay>
            )}
        </Wrapper>  
    );
}

export default CrossCheckA;