import { useState, useEffect } from "react";
import styled from "styled-components";
import Background from "../Icons/BackgroundBasic.png"
import Topbar from "../Components/Topbar";
import Sidebar from "../Components/Sidebar";
import { useLocation, useNavigate } from "react-router-dom";
import { getLLMAnswers, getOptimizedPromptResponse } from "../services/llmService";
import { usePrompt } from "../Context/PromptContext";

const Wrapper = styled.div`
    margin: 0;
    padding: 0;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    background-image: url(${Background});
    background-size: cover;
    background-position: center;
`

const CrossCheckWrapper = styled.div`
    display: flex;
    flex-direction: row;
    padding-top: 4rem;
`

const MainWrapper = styled.div`
    margin: 0;
    height: calc(100vh - 4rem);
    width: calc(100vw - 15.5rem);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
`

const MainText = styled.div`
    color: #fff;
    font-size: 54px;
    font-weight: 800;
    margin-bottom: 1.25rem;
    text-align: center;
`

const Highlight = styled.span`
    color: #C2CCFD;
`

const ContentWrapper = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    max-width: 800px;
`

const WaitText = styled.div`
    font-size: 20px;
    font-weight: 600;
    color: #fff;
    margin-bottom: 3.75rem;
`

const LoadingBarContainer = styled.div`
    width: 100%;
    max-width: 400px;
    height: 0.75rem;
    background-color: #ffffff;
    border-radius: 5px;
    overflow: hidden;
    position: relative;
`

const LoadingBar = styled.div<{ $progress: number }>`
    height: 100%;
    background-color: #C2CCFD;
    border-radius: 4px;
    width: ${props => props.$progress}%;
    transition: width 0.3s ease;
`


const CrossCheckL = () => {
    const [loadingProgress, setLoadingProgress] = useState(0);
    const location = useLocation();
    const navigate = useNavigate();
    const { setPromptId } = usePrompt();

    useEffect(() => {
        const fetchAnswers = async () => {
            try {
                const { request, isLoading, promptId, persona, selectedAIs, promptText } = location.state || {};
                
                // ÏµúÏ†ÅÌôîÎêú ÌîÑÎ°¨ÌîÑÌä∏Í∞Ä ÏûàÎäî Í≤ΩÏö∞ (PromptOptimizeÏóêÏÑú ÎÑòÏñ¥Ïò® Í≤ΩÏö∞)
                if (isLoading && promptId && promptText) {
                    console.log('üîÑ ÏµúÏ†ÅÌôîÎêú ÌîÑÎ°¨ÌîÑÌä∏Î°ú LLM ÏùëÎãµ ÏöîÏ≤≠:', {
                        promptId, models: selectedAIs, question: promptText, persona
                    });
                    
                    // Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
                    if (!selectedAIs || selectedAIs.length === 0) {
                        console.error('‚ùå ÏÑ†ÌÉùÎêú AIÍ∞Ä ÏóÜÏäµÎãàÎã§');
                        throw new Error('AIÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî');
                    }
                    
                    if (!promptId || typeof promptId !== 'number') {
                        console.error('‚ùå Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ promptId:', promptId);
                        throw new Error('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÌîÑÎ°¨ÌîÑÌä∏ IDÏûÖÎãàÎã§');
                    }
                    
                    if (!promptText || promptText.trim() === '') {
                        console.error('‚ùå Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÌîÑÎ°¨ÌîÑÌä∏ ÌÖçÏä§Ìä∏:', promptText);
                        throw new Error('ÌîÑÎ°¨ÌîÑÌä∏ ÌÖçÏä§Ìä∏Í∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§');
                    }
                    
                    console.log('‚úÖ Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ ÌÜµÍ≥º');
                    
                    // Î™®Îç∏Î™Ö Îß§Ìïë
                    const modelMapping: { [key: string]: string } = {
                        'chatgpt': 'gpt',
                        'claude': 'claude',
                        'gemini': 'gemini',
                        'perplexity': 'perplexity'
                    };
                    
                    const mappedModels = selectedAIs.map((ai: string) => modelMapping[ai] || ai);
                    console.log('üîß Îß§ÌïëÎêú Î™®Îç∏Î™Ö:', mappedModels);
                    
                    // API ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞ Î°úÍπÖ
                    const apiRequestData = {
                        promptId,
                        models: mappedModels,
                        question: promptText,
                        persona: persona || '',
                        promptDomain: 'POLITICS',
                        templateKey: 'optimized'
                    };
                    console.log('üì§ API ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞:', JSON.stringify(apiRequestData, null, 2));
                    
                    // ÏµúÏ†ÅÌôîÎêú ÌîÑÎ°¨ÌîÑÌä∏ API Ìò∏Ï∂ú
                    const apiResponse = await getOptimizedPromptResponse(
                        promptId,
                        mappedModels,
                        promptText,
                        persona
                    );
                    
                    console.log('‚úÖ ÏµúÏ†ÅÌôîÎêú ÌîÑÎ°¨ÌîÑÌä∏ API ÏùëÎãµ ÏôÑÎ£å:', apiResponse);
                    
                    // ÏùëÎãµ Îç∞Ïù¥ÌÑ∞Î•º CrossCheckA ÌòïÏãùÏóê ÎßûÍ≤å Î≥ÄÌôò
                    const responseData = Array.isArray(apiResponse) ? apiResponse[0] : apiResponse;
                    const responses = Object.values(responseData).map((data: any) => ({
                        llmModel: data.answer.model,
                        answer: data.answer.content
                    }));
                    
                    console.log('üìù Î≥ÄÌôòÎêú ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:', responses);
                    
                    // Î°úÎî© ÏôÑÎ£å ÌõÑ CrossCheckAÎ°ú Ïù¥Îèô
                    setLoadingProgress(100);
                    setPromptId(promptId);
                    setTimeout(() => {
                        navigate('/crosschecka', { 
                            state: { 
                                selectedAIs: mappedModels,
                                promptText: promptText,
                                responses,
                                promptId: promptId
                            } 
                        });
                    }, 800);
                    
                } else if (request) {
                    // Í∏∞Ï°¥ Î°úÏßÅ (ÏùºÎ∞ò ÌîÑÎ°¨ÌîÑÌä∏)
                    console.log('üîÑ API Ìò∏Ï∂ú ÏãúÏûë - ÏÑ†ÌÉùÎêú AI:', request.models);
                    
                    // API Ìò∏Ï∂ú ÏãúÏûë
                    const apiResponse = await getLLMAnswers(request);
                    
                    console.log('‚úÖ API ÏùëÎãµ ÏôÑÎ£å:', apiResponse);
                    
                    // llmAnswerDto Î∞∞Ïó¥ Ï∂îÏ∂ú
                    const responses = apiResponse.llmAnswerDto || [];
                    console.log('üìù Ï∂îÏ∂úÎêú ÎãµÎ≥Ä Îç∞Ïù¥ÌÑ∞:', responses);
                    
                    // Î°úÎî© ÏôÑÎ£å ÌõÑ CrossCheckAÎ°ú Ïù¥Îèô
                    setLoadingProgress(100); // 100%Î°ú ÏôÑÎ£å
                    setPromptId(apiResponse.promptId); // promptIdÎ•º Ïª®ÌÖçÏä§Ìä∏Ïóê Ï†ÄÏû•
                    setTimeout(() => {
                        navigate('/crosschecka', { 
                            state: { 
                                selectedAIs: location.state?.selectedAIs || [],
                                promptText: location.state?.promptText || '',
                                responses,
                                promptId: apiResponse.promptId // promptIdÎèÑ Ìï®Íªò Ï†ÑÎã¨
                            } 
                        });
                    }, 800); // Î°úÎî© Î∞îÍ∞Ä 100%ÍπåÏßÄ ÏôÑÎ£åÎêòÎäî Í≤ÉÏùÑ Î≥¥Ïó¨Ï£ºÍ∏∞ ÏúÑÌï¥ ÏïΩÍ∞Ñ Îçî ÏßÄÏó∞
                    
                } else {
                    console.error('No valid request data found');
                    navigate('/crosscheckq');
                    return;
                }
                
            } catch (error) {
                console.error('Error fetching LLM answers:', error);
                // ÏóêÎü¨ Î∞úÏÉù Ïãú ÏóêÎü¨ ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌïòÍ±∞ÎÇò Î™®Îã¨ ÌëúÏãú
                // Ïó¨Í∏∞ÏÑúÎäî Í∞ÑÎã®Ìûà CrossCheckQÎ°ú ÎèåÏïÑÍ∞ÄÎèÑÎ°ù Ï≤òÎ¶¨
                setTimeout(() => {
                    navigate('/crosscheckq');
                }, 1000);
            }
        };

        // Î°úÎî© Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÏûë
        const interval = setInterval(() => {
            setLoadingProgress(prev => {
                if (prev >= 90) { // 90%ÍπåÏßÄÎßå ÏßÑÌñâ
                    clearInterval(interval);
                    return 90;
                }
                return prev + 2;
            });
        }, 100);

        // API Ìò∏Ï∂ú Ïã§Ìñâ
        fetchAnswers();

        return () => clearInterval(interval);
    }, [navigate, location.state, setPromptId]);

    return (
        <Wrapper>
            <Topbar/>
            <CrossCheckWrapper>
                <Sidebar/>
                <MainWrapper>
                    <MainText>ÏÑ†ÌÉùÌïú AI Î™®Îç∏Î°ú <Highlight>ÎãµÎ≥ÄÏùÑ </Highlight>ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏñ¥Ïöî.</MainText>
                    <ContentWrapper>
                        <WaitText>Ï°∞Í∏àÎßå Í∏∞Îã§Î†§ Ï£ºÏÑ∏Ïöî.</WaitText>
                        <LoadingBarContainer>
                            <LoadingBar $progress={loadingProgress} />
                        </LoadingBarContainer>
                    </ContentWrapper>
                </MainWrapper>
            </CrossCheckWrapper>
        </Wrapper>  
    );
}

export default CrossCheckL;